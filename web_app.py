from flask import Flask, render_template, request, jsonify, send_file, session
from flask_cors import CORS
import os
import json
import subprocess
import shutil
from pathlib import Path
import tempfile
import uuid
from datetime import datetime
import threading
import time
from werkzeug.utils import secure_filename

# Import c√°c function t·ª´ pipeline g·ªëc
from pipeline import (
    download_with_ytdlp, slow_down_video, extract_audio_for_stt,
    stt_assemblyai, translate_srt_ai, srt_to_aligned_audio_fpt_ai,
    srt_to_aligned_audio_fpt_ai_with_failover,
    replace_audio, speed_up_130, add_background_music, overlay_template,
    remove_silence_ffmpeg, get_vietnamese_error_message
)

app = Flask(__name__)
app.secret_key = 'your-secret-key-change-this'
CORS(app)

# C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
DEFAULT_CONFIG = {
    # FPT AI API Keys - H·ªó tr·ª£ nhi·ªÅu keys v·ªõi auto-failover
    'fpt_api_keys': [
        'ffFujWkLFqAAZbEu5O3Fy1eplKiOVtGW'  # Key m·∫∑c ƒë·ªãnh
    ],
    'fpt_current_key_index': 0,  # Index c·ªßa key hi·ªán t·∫°i
    'fpt_voice': 'banmai',  # Gi·ªçng n√≥i FPT AI (theo t√†i li·ªáu: banmai, lannhi, leminh, myan, thuminh, giahuy, linhsan)
    'fpt_speed': '-1',  # T·ªëc ƒë·ªô ƒë·ªçc (-1 ‚âà 0.7x speed, ph√π h·ª£p cho video translate)
    'fpt_speech_speed': '0.8',  # T·ªëc ƒë·ªô n√≥i (0.5-2.0, 1.0 = b√¨nh th∆∞·ªùng, 0.8 = ch·∫≠m h∆°n)
    'fpt_format': 'mp3',  # Format audio (mp3 ho·∫∑c wav)
    # AI Provider - ch·ªâ s·ª≠ d·ª•ng Gemini v·ªõi multiple keys v√† failover
    'gemini_api_key': '',  # API key c·ªßa ng∆∞·ªùi d√πng (∆∞u ti√™n cao nh·∫•t)
    'gemini_backup_keys': [
        'AIzaSyClZFBCA_uXJLwBYG0rV3j0-flFEH6SyOU',  # Key m·∫∑c ƒë·ªãnh
        'AIzaSyAkrlcnwqDuWci9Djgve3bVoYJYTACKLDw',  # Backup key 1
        'AIzaSyBXe18Cq2S97Pc7o7pvdL9tXzEabcKN5X4',  # Backup key 2
        'AIzaSyDk2UHw8Pghh8ROMAesrYCxv5bHuHsIrRM',  # Backup key 3
    ],
    'gemini_current_key_index': 0,  # Index c·ªßa key hi·ªán t·∫°i
    'gemini_model': 'gemini-2.0-flash',
    'ai_provider': 'gemini',  # Ch·ªâ h·ªó tr·ª£ Gemini
    'assemblyai_api_key': '3fcbc58eb11d489c820f00535c7f8fb5',
    'edge_voice': 'vi-VN-HoaiMyNeural',
    'tts_language': 'vi',
    'stt_language': 'en',
    'stt_method': 'utterances',  # 'utterances', 'json' ho·∫∑c 'srt' - Utterances cho c√¢u ho√†n ch·ªânh nh·∫•t
    'stt_chars_per_caption': 300,  # S·ªë k√Ω t·ª± m·ªói caption khi d√πng SRT (tƒÉng ƒë·ªÉ c√≥ c√¢u ho√†n ch·ªânh)
    'stt_speech_threshold': 0.5,  # Ng∆∞·ª°ng ph√°t hi·ªán speech (0.0-1.0)
    'stt_disfluencies': False,    # Lo·∫°i b·ªè filler words
    'use_ai_segmentation': True,  # S·ª≠ d·ª•ng AI ƒë·ªÉ c·∫£i thi·ªán SRT segmentation
    'min_sentence_length': 20,    # ƒê·ªô d√†i t·ªëi thi·ªÉu m·ªói c√¢u
    'max_sentence_length': 150,   # ƒê·ªô d√†i t·ªëi ƒëa m·ªói c√¢u
    # Silence Remover settings
    'enable_silence_removal': True,  # B·∫≠t t√≠nh nƒÉng c·∫Øt kho·∫£ng l·∫∑ng
    'silence_threshold': -50.0,      # Ng∆∞·ª°ng √¢m thanh (dB)
    'min_silence_duration': 0.4,     # Th·ªùi gian t·ªëi thi·ªÉu kho·∫£ng l·∫∑ng (gi√¢y)
    'max_silence_duration': 2.0,     # Th·ªùi gian t·ªëi ƒëa kho·∫£ng l·∫∑ng c·∫ßn c·∫Øt (gi√¢y)
    'silence_padding': 0.1,          # Padding sau khi c·∫Øt (gi√¢y)
    
    # Proxy settings
    'proxy_enabled': False,          # B·∫≠t proxy
    'proxy_config': '',              # Format: IP:PORT:USER:PASS
}

# L∆∞u tr·ªØ tr·∫°ng th√°i c√°c project
projects = {}

# H·ªá th·ªëng queue ƒë·ªÉ x·ª≠ l√Ω nhi·ªÅu d·ª± √°n tu·∫ßn t·ª±
import queue
import threading

project_queue = queue.Queue()
queue_processor_running = False

# FPT AI Key Management
def get_current_fpt_key(config):
    """L·∫•y FPT API key hi·ªán t·∫°i"""
    keys = config.get('fpt_api_keys', [])
    if not keys:
        return None
    
    current_index = config.get('fpt_current_key_index', 0)
    if current_index >= len(keys):
        current_index = 0
        config['fpt_current_key_index'] = current_index
    
    return keys[current_index]

def switch_to_next_fpt_key(config):
    """Chuy·ªÉn sang FPT API key ti·∫øp theo"""
    keys = config.get('fpt_api_keys', [])
    if len(keys) <= 1:
        return False  # Ch·ªâ c√≥ 1 key ho·∫∑c kh√¥ng c√≥ key
    
    current_index = config.get('fpt_current_key_index', 0)
    next_index = (current_index + 1) % len(keys)
    config['fpt_current_key_index'] = next_index
    
    print(f"üîÑ Switched to FPT API key #{next_index + 1}/{len(keys)}")
    return True

def get_current_gemini_key(config):
    """L·∫•y Gemini API key hi·ªán t·∫°i (∆∞u ti√™n key c·ªßa ng∆∞·ªùi d√πng)"""
    # ∆Øu ti√™n key c·ªßa ng∆∞·ªùi d√πng
    user_key = config.get('gemini_api_key', '').strip()
    if user_key:
        return user_key
    
    # N·∫øu kh√¥ng c√≥ key c·ªßa ng∆∞·ªùi d√πng, d√πng backup keys
    backup_keys = config.get('gemini_backup_keys', [])
    if not backup_keys:
        return None
    
    current_index = config.get('gemini_current_key_index', 0)
    if current_index >= len(backup_keys):
        current_index = 0
        config['gemini_current_key_index'] = current_index
    
    # ƒê·∫£m b·∫£o index h·ª£p l·ªá
    if current_index < len(backup_keys):
        return backup_keys[current_index]
    
    # Fallback v·ªÅ key ƒë·∫ßu ti√™n
    return backup_keys[0] if backup_keys else None

def switch_to_next_gemini_key(config):
    """Chuy·ªÉn sang Gemini API key ti·∫øp theo (ch·ªâ √°p d·ª•ng cho backup keys)"""
    # N·∫øu c√≥ key c·ªßa ng∆∞·ªùi d√πng, kh√¥ng chuy·ªÉn
    user_key = config.get('gemini_api_key', '').strip()
    if user_key:
        return False
    
    backup_keys = config.get('gemini_backup_keys', [])
    if len(backup_keys) <= 1:
        return False  # Ch·ªâ c√≥ 1 key ho·∫∑c kh√¥ng c√≥ key
    
    current_index = config.get('gemini_current_key_index', 0)
    next_index = (current_index + 1) % len(backup_keys)
    config['gemini_current_key_index'] = next_index
    
    print(f"üîÑ Switched to Gemini API key #{next_index + 1}/{len(backup_keys)}")
    return True

def get_proxy_config(config):
    """Parse proxy config t·ª´ format IP:PORT:USER:PASS"""
    if not config.get('proxy_enabled', False):
        return None
    
    proxy_str = config.get('proxy_config', '').strip()
    if not proxy_str:
        return None
    
    try:
        parts = proxy_str.split(':')
        if len(parts) == 4:
            ip, port, user, password = parts
            return {
                'http': f'http://{user}:{password}@{ip}:{port}',
                'https': f'http://{user}:{password}@{ip}:{port}'
            }
        elif len(parts) == 2:
            ip, port = parts
            return {
                'http': f'http://{ip}:{port}',
                'https': f'http://{ip}:{port}'
            }
        else:
            print(f"‚ö†Ô∏è Invalid proxy format: {proxy_str}")
            return None
    except Exception as e:
        print(f"‚ö†Ô∏è Error parsing proxy config: {e}")
        return None

def start_queue_processor():
    """B·∫Øt ƒë·∫ßu queue processor ƒë·ªÉ x·ª≠ l√Ω d·ª± √°n tu·∫ßn t·ª±"""
    global queue_processor_running
    if not queue_processor_running:
        queue_processor_running = True
        processor_thread = threading.Thread(target=process_project_queue, daemon=True)
        processor_thread.start()
        
        # Th√™m background thread ƒë·ªÉ ki·ªÉm tra queue ƒë·ªãnh k·ª≥
        queue_checker_thread = threading.Thread(target=queue_checker_loop, daemon=True)
        queue_checker_thread.start()
        
        # Kh·ªüi ƒë·ªông ngay l·∫≠p t·ª©c ƒë·ªÉ ki·ªÉm tra queue
        check_and_start_next_project()
        
        print("‚úÖ Queue processor and checker started")

def process_project_queue():
    """X·ª≠ l√Ω queue d·ª± √°n tu·∫ßn t·ª± (legacy - kh√¥ng s·ª≠ d·ª•ng n·ªØa)"""
    global queue_processor_running
    print("üîÑ Queue processor running (legacy mode)...")
    
    while queue_processor_running:
        try:
            # Ch·ªâ sleep ƒë·ªÉ kh√¥ng block
            time.sleep(10)
        except Exception as e:
            print(f"‚ùå Queue processor error: {e}")
            continue

def queue_checker_loop():
    """Background loop ƒë·ªÉ ki·ªÉm tra v√† kh·ªüi ƒë·ªông d·ª± √°n trong queue"""
    global queue_processor_running
    print("üîç Queue checker started...")
    
    while queue_processor_running:
        try:
            # Ki·ªÉm tra m·ªói 5 gi√¢y (nhanh h∆°n)
            time.sleep(5)
            
            # Ki·ªÉm tra xem c√≥ d·ª± √°n n√†o ƒëang ch·∫°y kh√¥ng
            running_projects = [p for p in projects.values() if p['status'] == 'running']
            queued_projects = [p for p in projects.values() if p['status'] == 'queued']
            
            print(f"üîç Queue checker: {len(running_projects)} running, {len(queued_projects)} queued")
            
            # Ki·ªÉm tra c√°c project ƒëang ch·∫°y c√≥ b·ªã stuck kh√¥ng
            current_time = time.time()
            for project in running_projects:
                # Ki·ªÉm tra n·∫øu project ƒëang ch·∫°y qu√° l√¢u (30 ph√∫t)
                if 'start_time' not in project:
                    project['start_time'] = current_time
                elif current_time - project['start_time'] > 1800:  # 30 ph√∫t
                    print(f"‚ö†Ô∏è Project {project['id'][:8]} seems stuck (running for 30+ minutes), marking as error")
                    project['status'] = 'error'
                    project['error'] = 'Project stuck - timeout after 30 minutes'
                    check_and_start_next_project()
                    break
            
            # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ project n√†o ƒëang ch·∫°y v√† c√≥ project trong queue
            if len(running_projects) == 0 and len(queued_projects) > 0:
                print(f"üîç Queue checker found {len(queued_projects)} projects in queue, no running projects")
                check_and_start_next_project()
                
        except Exception as e:
            print(f"‚ùå Queue checker error: {e}")
            continue

def get_queue_status():
    """L·∫•y tr·∫°ng th√°i queue"""
    queued_projects = [p for p in projects.values() if p['status'] == 'queued']
    queue_size = len(queued_projects)
    
    # C·∫≠p nh·∫≠t queue position cho c√°c project
    position = 1
    for project_id, project in projects.items():
        if project['status'] == 'queued':
            project['queue_position'] = position
            position += 1
    
    return {
        'queue_size': queue_size,
        'processor_running': queue_processor_running
    }

def check_and_start_next_project():
    """Ki·ªÉm tra v√† b·∫Øt ƒë·∫ßu d·ª± √°n ti·∫øp theo trong queue"""
    print(f"üîç Checking for next project in queue...")
    
    # Ki·ªÉm tra xem c√≥ project n√†o ƒëang ch·∫°y kh√¥ng
    running_projects = [p for p in projects.values() if p['status'] == 'running']
    queued_projects = [p for p in projects.values() if p['status'] == 'queued']
    
    print(f"üìä Current status: {len(running_projects)} running projects, {len(queued_projects)} queued projects")
    
    if len(running_projects) == 0 and len(queued_projects) > 0:
        # Kh√¥ng c√≥ project n√†o ƒëang ch·∫°y v√† c√≥ project trong queue
        # L·∫•y project ƒë·∫ßu ti√™n trong danh s√°ch queued
        next_project = queued_projects[0]
        next_project_id = next_project['id']
        
        print(f"üéØ Starting next project from queue: {next_project_id}")
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i
        next_project['status'] = 'running'
        next_project['queue_position'] = 0
        
        # S·ª≠ d·ª•ng DEFAULT_CONFIG thay v√¨ session config ƒë·ªÉ tr√°nh l·ªói context
        config = DEFAULT_CONFIG.copy()
        
        # Ch·∫°y project trong thread ri√™ng
        thread = threading.Thread(target=run_pipeline_async, args=(next_project_id, next_project['url'], Path(f"projects/{next_project_id}"), config))
        thread.daemon = True
        thread.start()
        
        print(f"‚úÖ Next project {next_project_id} started successfully")
        
        # C·∫≠p nh·∫≠t queue positions cho c√°c project c√≤n l·∫°i
        remaining_queued = [p for p in projects.values() if p['status'] == 'queued']
        for i, project in enumerate(remaining_queued):
            project['queue_position'] = i + 1
            
    elif len(running_projects) > 0:
        print(f"üìã {len(running_projects)} projects still running, queue will be processed later")
    else:
        print(f"üìã No projects in queue to process")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/config', methods=['GET', 'POST'])
def config():
    if request.method == 'POST':
        config_data = request.json
        session['config'] = config_data
        return jsonify({'status': 'success'})
    else:
        return jsonify(session.get('config', DEFAULT_CONFIG))

@app.route('/api/projects', methods=['GET'])
def get_projects():
    # C·∫≠p nh·∫≠t queue positions
    get_queue_status()
    return jsonify(list(projects.values()))

@app.route('/api/queue/status')
def get_queue_status_api():
    """API ƒë·ªÉ l·∫•y tr·∫°ng th√°i queue"""
    return jsonify(get_queue_status())

@app.route('/api/projects/<project_id>', methods=['GET'])
def get_project(project_id):
    if project_id in projects:
        return jsonify(projects[project_id])
    return jsonify({'error': 'Project not found'}), 404

@app.route('/api/start', methods=['POST'])
def start_project():
    data = request.json
    url = data.get('url')
    project_name = data.get('name', '')  # L·∫•y t√™n d·ª± √°n t·ª´ request
    
    # ƒê·∫£m b·∫£o config c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin
    session_config = session.get('config', {})
    config = DEFAULT_CONFIG.copy()
    config.update(session_config)
    
    if not url:
        return jsonify({'error': 'URL is required'}), 400
    
    # T·∫°o project ID v√† t√™n
    project_id = str(uuid.uuid4())
    if not project_name:
        # T·∫°o t√™n t·ª± ƒë·ªông t·ª´ URL
        try:
            from urllib.parse import urlparse
            parsed_url = urlparse(url)
            if 'youtube.com' in parsed_url.netloc:
                project_name = f"YouTube Video {project_id[:8]}"
            else:
                project_name = f"Video {project_id[:8]}"
        except:
            project_name = f"Project {project_id[:8]}"
    
    project_dir = Path(f"projects/{project_id}")
    project_dir.mkdir(parents=True, exist_ok=True)
    
    # Kh·ªüi t·∫°o project
    project = {
        'id': project_id,
        'name': project_name,
        'url': url,
        'status': 'starting',
        'current_step': 'download',
        'progress': 0,
        'steps': {
            'download': {'status': 'pending', 'progress': 0, 'error': None},
            'slow': {'status': 'pending', 'progress': 0, 'error': None},
            'stt': {'status': 'pending', 'progress': 0, 'error': None},
            'translate': {'status': 'pending', 'progress': 0, 'error': None},
            'tts': {'status': 'pending', 'progress': 0, 'error': None},
            'replace_audio': {'status': 'pending', 'progress': 0, 'error': None},
            'silence_removal': {'status': 'pending', 'progress': 0, 'error': None},
            'speed_up': {'status': 'pending', 'progress': 0, 'error': None},
            'music': {'status': 'pending', 'progress': 0, 'error': None},
            'overlay': {'status': 'pending', 'progress': 0, 'error': None}
        },
        'created_at': datetime.now().isoformat(),
        'output_file': None
    }
    
    projects[project_id] = project
    
    # B·∫Øt ƒë·∫ßu queue processor n·∫øu ch∆∞a ch·∫°y
    start_queue_processor()
    
    # Ki·ªÉm tra xem c√≥ project n√†o ƒëang ch·∫°y kh√¥ng
    running_projects = [p for p in projects.values() if p['status'] == 'running']
    print(f"üîç Current running projects: {len(running_projects)}")
    for p in running_projects:
        print(f"   - Project {p['id'][:8]}... (status: {p['status']})")
    
    # ƒê·∫£m b·∫£o ch·ªâ c√≥ 1 project ch·∫°y t·∫°i m·ªôt th·ªùi ƒëi·ªÉm
    if len(running_projects) == 0:
        # Kh√¥ng c√≥ project n√†o ƒëang ch·∫°y, ch·∫°y ngay
        project['status'] = 'running'
        project['queue_position'] = 0
        print(f"üöÄ Starting project {project_id} immediately")
        thread = threading.Thread(target=run_pipeline_async, args=(project_id, url, project_dir, config))
        thread.daemon = True
        thread.start()
    else:
        # C√≥ project ƒëang ch·∫°y, th√™m v√†o queue
        print(f"‚ö†Ô∏è Found {len(running_projects)} running projects, adding to queue")
        
        # Th√™m project m·ªõi v√†o queue (ch·ªâ th√™m v√†o danh s√°ch, kh√¥ng d√πng queue.Queue)
        project['status'] = 'queued'
        
        # T√≠nh queue position d·ª±a tr√™n s·ªë project ƒëang queued
        queued_projects = [p for p in projects.values() if p['status'] == 'queued']
        project['queue_position'] = len(queued_projects)
        
        print(f"üìã Project {project_id} added to queue (position: {project['queue_position']})")
        print(f"   Currently running: {running_projects[0]['id'][:8]}...")
    
    return jsonify(project)

def run_pipeline_async(project_id, url, workdir, config):
    try:
        project = projects[project_id]
        
        # ƒê·∫£m b·∫£o config c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin
        full_config = DEFAULT_CONFIG.copy()
        full_config.update(config)
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i
        project['status'] = 'running'
        project['current_step'] = 'download'
        project['steps']['download']['status'] = 'running'
        project['start_time'] = time.time()  # Ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu
        
        print(f"üöÄ Starting pipeline for project {project_id}")
        
        # 1. Download
        input_mp4 = workdir / "input.mp4"
        try:
            download_with_ytdlp(url, input_mp4)
            project['steps']['download']['status'] = 'completed'
            project['steps']['download']['progress'] = 100
            project['progress'] = 10
        except Exception as e:
            project['steps']['download']['status'] = 'error'
            project['steps']['download']['progress'] = 0
            project['steps']['download']['error'] = str(e)
            project['status'] = 'error'
            
            # Cung c·∫•p th√¥ng tin l·ªói chi ti·∫øt h∆°n
            error_msg = str(e)
            if "HTTP Error 403" in error_msg:
                project['error'] = f"L·ªói t·∫£i video: Video kh√¥ng th·ªÉ truy c·∫≠p (403 Forbidden). C√≥ th·ªÉ video ƒë√£ b·ªã x√≥a, private, ho·∫∑c c√≥ h·∫°n ch·∫ø ƒë·ªãa l√Ω. H√£y th·ª≠ URL kh√°c."
            elif "Requested format is not available" in error_msg:
                project['error'] = f"L·ªói t·∫£i video: ƒê·ªãnh d·∫°ng video kh√¥ng kh·∫£ d·ª•ng. H√£y th·ª≠ URL kh√°c."
            elif "fragment 1 not found" in error_msg:
                project['error'] = f"L·ªói t·∫£i video: Video c√≥ v·∫•n ƒë·ªÅ v·ªÅ ƒë·ªãnh d·∫°ng. H√£y th·ª≠ URL kh√°c."
            else:
                project['error'] = f"L·ªói t·∫£i video: {error_msg}"
            return
        
        # 2. Slow down
        project['current_step'] = 'slow'
        project['steps']['slow']['status'] = 'running'
        slow_mp4 = workdir / "slow.mp4"
        slow_down_video(input_mp4, slow_mp4)
        project['steps']['slow']['status'] = 'completed'
        project['steps']['slow']['progress'] = 100
        project['progress'] = 20
        
        # 3. STT
        if full_config.get('assemblyai_api_key') and full_config['assemblyai_api_key'].strip():
            project['current_step'] = 'stt'
            project['steps']['stt']['status'] = 'running'
            stt_wav = workdir / "stt.wav"
            subs_srt_raw = workdir / "subs_raw.srt"
            extract_audio_for_stt(slow_mp4, stt_wav)
            try:
                # S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p STT d·ª±a tr√™n c·∫•u h√¨nh
                stt_method = full_config.get('stt_method', 'utterances')
                if stt_method == 'utterances':
                    from pipeline import stt_assemblyai
                    stt_assemblyai(stt_wav, subs_srt_raw, full_config['assemblyai_api_key'], language_code=full_config['stt_language'], config=full_config)
                elif stt_method == 'json':
                    from pipeline import stt_assemblyai
                    stt_assemblyai(stt_wav, subs_srt_raw, full_config['assemblyai_api_key'], language_code=full_config['stt_language'], config=full_config)
                else:  # srt
                    from pipeline import stt_assemblyai_legacy
                    stt_assemblyai_legacy(stt_wav, subs_srt_raw, full_config['assemblyai_api_key'], language_code=full_config['stt_language'], config=full_config)
                
                project['steps']['stt']['status'] = 'completed'
                project['steps']['stt']['progress'] = 100
            except Exception as e:
                print(f"AssemblyAI STT failed: {e}")
                # Fallback to empty SRT
                with open(subs_srt_raw, 'w', encoding='utf-8') as f:
                    f.write("1\n00:00:00,000 --> 00:00:05,000\n[Audio processing failed]\n\n")
                project['steps']['stt']['status'] = 'error'
                project['steps']['stt']['progress'] = 100
                project['steps']['stt']['error'] = str(e)
            project['progress'] = 25
        else:
            # Skip STT if no API key, create empty SRT
            subs_srt_raw = workdir / "subs_raw.srt"
            with open(subs_srt_raw, 'w', encoding='utf-8') as f:
                f.write("1\n00:00:00,000 --> 00:00:05,000\n[No audio detected]\n\n")
            project['steps']['stt']['status'] = 'skipped'
            project['steps']['stt']['progress'] = 100
            project['progress'] = 25

        # 4. Copy SRT (skip merge step)
        subs_srt = workdir / "subs.srt"
        subs_srt_raw.rename(subs_srt)  # S·ª≠ d·ª•ng SRT g·ªëc thay v√¨ merge
        project['progress'] = 30
        
        # 5. Translate
        project['current_step'] = 'translate'
        project['steps']['translate']['status'] = 'running'
        subs_translated_srt = workdir / "subs_vi.srt"
        
        if full_config['ai_provider'] == 'gemini':
            # S·ª≠ d·ª•ng Gemini v·ªõi retry logic v√† key management
            max_retries = 3  # 3 l·∫ßn retry, m·ªói l·∫ßn th·ª≠ t·∫•t c·∫£ keys
            last_error = None
            
            # Th·ª≠ t·∫•t c·∫£ keys tr∆∞·ªõc khi b√°o l·ªói
            backup_keys = full_config.get('gemini_backup_keys', [])
            user_key = full_config.get('gemini_api_key', '').strip()
            all_keys = [user_key] + backup_keys if user_key else backup_keys
            
            translation_success = False
            for retry_attempt in range(max_retries):
                for key_index, current_gemini_key in enumerate(all_keys):
                    if not current_gemini_key:
                        continue
                        
                    try:
                        print(f"üîÑ Translation attempt {retry_attempt + 1}/{max_retries} with Gemini key #{key_index + 1}")
                        
                        translate_srt_ai(subs_srt, subs_translated_srt, model=full_config['gemini_model'], api_key=current_gemini_key, provider='gemini', config=full_config)
                        
                        project['steps']['translate']['status'] = 'completed'
                        project['steps']['translate']['progress'] = 100
                        project['progress'] = 40
                        print(f"‚úÖ Translation completed successfully with key #{key_index + 1}")
                        translation_success = True
                        break  # Tho√°t kh·ªèi v√≤ng l·∫∑p key n·∫øu th√†nh c√¥ng
                        
                    except Exception as e:
                        last_error = e
                        print(f"‚ùå Translation failed with key #{key_index + 1}: {e}")
                        
                        # Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi th·ª≠ key ti·∫øp theo
                        if key_index < len(all_keys) - 1:
                            time.sleep(1)
                
                # N·∫øu translation th√†nh c√¥ng, tho√°t kh·ªèi v√≤ng l·∫∑p retry
                if translation_success:
                    break
                
                # Ch·ªù l√¢u h∆°n tr∆∞·ªõc khi retry to√†n b·ªô
                if retry_attempt < max_retries - 1:
                    print(f"üîÑ Retrying all keys (attempt {retry_attempt + 2}/{max_retries})")
                    time.sleep(3)
            
            # N·∫øu t·∫•t c·∫£ retry ƒë·ªÅu th·∫•t b·∫°i
            if not translation_success:
                project['steps']['translate']['status'] = 'error'
                project['steps']['translate']['error'] = str(last_error)
                project['status'] = 'error'
                project['error'] = f"Translation error: {str(last_error)}"
                return
                
        elif full_config['ai_provider'] == 'deepseek':
            translate_srt_ai(subs_srt, subs_translated_srt, model=full_config['deepseek_model'], api_key=full_config['deepseek_api_key'], provider='deepseek', config=full_config)
            project['steps']['translate']['status'] = 'completed'
            project['steps']['translate']['progress'] = 100
            project['progress'] = 40
        
        # 6. TTS
        project['current_step'] = 'tts'
        project['steps']['tts']['status'] = 'running'
        tts_wav = workdir / "tts.wav"
        subs_translated_srt = workdir / "subs_vi.srt"
        
        try:
            # Ch·ªçn TTS provider d·ª±a tr√™n c·∫•u h√¨nh
            if full_config.get('tts_provider', 'fpt') == 'fpt':
                print("Using FPT AI TTS...")
                from pipeline import srt_to_aligned_audio_fpt_ai_with_failover
                # Kh√¥ng truy·ªÅn proxies ƒë·ªÉ tr√°nh l·ªói
                srt_to_aligned_audio_fpt_ai_with_failover(
                    subs_translated_srt, tts_wav, 
                    full_config,  # Pass full config for key management
                    full_config['fpt_voice'],
                    full_config.get('fpt_speed', ''),
                    full_config.get('fpt_format', 'mp3'),
                    speech_speed=full_config.get('fpt_speech_speed', '0.8')
                )
            else:
                # ElevenLabs ƒë√£ b·ªã lo·∫°i b·ªè, ch·ªâ s·ª≠ d·ª•ng FPT AI
                raise RuntimeError("ElevenLabs TTS ƒë√£ b·ªã lo·∫°i b·ªè. Ch·ªâ s·ª≠ d·ª•ng FPT AI.")
                
            project['steps']['tts']['status'] = 'completed'
            project['steps']['tts']['progress'] = 100
            project['progress'] = 50
        except Exception as e:
            print(f"TTS failed: {e}")
            project['steps']['tts']['status'] = 'error'
            project['steps']['tts']['progress'] = 100
            project['steps']['tts']['error'] = str(e)
            project['status'] = 'error'
            project['error'] = f"TTS error: {str(e)}"
            return
        
        # 7. Replace audio (th√™m √¢m thanh ti·∫øng Vi·ªát v√†o video slow)
        project['current_step'] = 'replace_audio'
        project['steps']['replace_audio']['status'] = 'running'
        final_video = workdir / "final_video.mp4"
        replace_audio(slow_mp4, tts_wav, final_video)
        project['steps']['replace_audio']['status'] = 'completed'
        project['steps']['replace_audio']['progress'] = 100
        project['progress'] = 60
        
        # 8. Speed up (tƒÉng t·ªëc video c√≥ √¢m thanh ti·∫øng Vi·ªát)
        project['current_step'] = 'speed_up'
        project['steps']['speed_up']['status'] = 'running'
        fast_video = workdir / "fast_video.mp4"
        speed_up_130(final_video, fast_video)
        project['steps']['speed_up']['status'] = 'completed'
        project['steps']['speed_up']['progress'] = 100
        project['progress'] = 70
        
        # 9. Silence Removal (optional) - c·∫Øt kho·∫£ng l·∫∑ng cu·ªëi c√πng (sau khi tƒÉng t·ªëc)
        project['current_step'] = 'silence_removal'
        project['steps']['silence_removal']['status'] = 'running'
        
        if full_config.get('enable_silence_removal', False):
            silence_removed_video = workdir / "silence_removed.mp4"
            from pipeline import remove_silence_ffmpeg_video_audio
            remove_silence_ffmpeg_video_audio(
                fast_video, silence_removed_video,  # S·ª≠ d·ª•ng fast_video (ƒë√£ tƒÉng t·ªëc)
                threshold=full_config.get('silence_threshold', -50.0),
                min_duration=full_config.get('min_silence_duration', 0.4),
                max_duration=full_config.get('max_silence_duration', 2.0),
                padding=full_config.get('silence_padding', 0.1)
            )
            final_output = silence_removed_video  # Use processed video as final output
        else:
            final_output = fast_video  # Use speed-up video as final output
        
        project['steps']['silence_removal']['status'] = 'completed'
        project['steps']['silence_removal']['progress'] = 100
        project['progress'] = 80
        
        # 8. Music (optional) - Skip for now as we need to handle file uploads
        # if data.get('music_path'):
        #     project['current_step'] = 'music'
        #     project['steps']['music']['status'] = 'running'
        #     final_with_music = workdir / "final_with_music.mp4"
        #     add_background_music(fast_video, Path(data['music_path']), final_with_music)
        #     project['steps']['music']['status'] = 'completed'
        #     project['steps']['music']['progress'] = 100
        #     project['progress'] = 80
        
        # 9. Overlay (optional) - Skip for now as we need to handle file uploads
        # if data.get('overlay_path'):
        #     project['current_step'] = 'overlay'
        #     project['steps']['overlay']['status'] = 'running'
        #     final_output = workdir / "final_output.mp4"
        #     overlay_template(fast_video, Path(data['overlay_path']), final_output)
        #     project['steps']['overlay']['status'] = 'completed'
        #     project['steps']['overlay']['progress'] = 100
        #     project['progress'] = 90
        
        # Ho√†n th√†nh
        project['status'] = 'completed'
        project['progress'] = 100
        project['output_file'] = str(final_output)
        
        print(f"‚úÖ Project {project_id} completed successfully!")
        
        # K√≠ch ho·∫°t d·ª± √°n ti·∫øp theo trong queue
        print(f"üîÑ Checking queue for next project...")
        check_and_start_next_project()
        
    except Exception as e:
        print(f"‚ùå Pipeline error for project {project_id}: {e}")
        
        # Ki·ªÉm tra xem project c√≥ t·ªìn t·∫°i kh√¥ng
        if project_id in projects:
            project = projects[project_id]
            project['status'] = 'error'
            vietnamese_error = get_vietnamese_error_message(str(e))
            project['error'] = vietnamese_error
            print(f"Vietnamese error message: {vietnamese_error}")
        else:
            print(f"Project {project_id} not found when handling pipeline error: {e}")
        
        # K√≠ch ho·∫°t d·ª± √°n ti·∫øp theo trong queue ngay c·∫£ khi d·ª± √°n hi·ªán t·∫°i b·ªã l·ªói
        print(f"üîÑ Project {project_id} failed, starting next project in queue...")
        check_and_start_next_project()

@app.route('/api/retry/<project_id>/<step_name>', methods=['POST'])
def retry_step(project_id, step_name):
    if project_id not in projects:
        return jsonify({'error': 'Project not found'}), 404
    
    project = projects[project_id]
    
    if step_name not in project['steps']:
        return jsonify({'error': 'Invalid step name'}), 400
    
    # ƒê·ªãnh nghƒ©a th·ª© t·ª± c√°c b∆∞·ªõc
    step_order = ['download', 'slow', 'stt', 'translate', 'tts', 'replace_audio', 'speed_up', 'silence_removal']
    
    try:
        start_index = step_order.index(step_name)
    except ValueError:
        return jsonify({'error': 'Invalid step name'}), 400
    
    # Cho ph√©p retry t·ª´ b·∫•t k·ª≥ b∆∞·ªõc n√†o, k·ªÉ c·∫£ khi project ƒë√£ completed ho·∫∑c error
    print(f"üîÑ Retry requested for project {project_id} from step '{step_name}' (current status: {project['status']})")
    
    # D·ª™NG ti·∫øn tr√¨nh hi·ªán t·∫°i n·∫øu ƒëang ch·∫°y
    if project['status'] == 'running':
        print(f"üõë Stopping current pipeline for project {project_id}")
        project['status'] = 'stopped'
        # ƒê√°nh d·∫•u t·∫•t c·∫£ c√°c b∆∞·ªõc ƒëang ch·∫°y th√†nh pending
        for step_name_inner, step_data in project['steps'].items():
            if step_data['status'] == 'running':
                step_data['status'] = 'pending'
                step_data['progress'] = 0
                step_data['error'] = None  # Clear any previous errors
    
    # Reset ch·ªâ c√°c b∆∞·ªõc t·ª´ b∆∞·ªõc hi·ªán t·∫°i tr·ªü ƒëi (gi·ªØ l·∫°i k·∫øt qu·∫£ c√°c b∆∞·ªõc tr∆∞·ªõc)
    for i in range(start_index, len(step_order)):
        reset_step = step_order[i]
        project['steps'][reset_step]['status'] = 'pending'
        project['steps'][reset_step]['progress'] = 0
        project['steps'][reset_step]['error'] = None
    
    # T√≠nh l·∫°i progress d·ª±a tr√™n c√°c b∆∞·ªõc ƒë√£ ho√†n th√†nh
    completed_steps = sum(1 for step in project['steps'].values() if step['status'] == 'completed')
    total_steps = len(project['steps'])
    project['progress'] = int((completed_steps / total_steps) * 100)
    
    # Reset tr·∫°ng th√°i d·ª± √°n
    project['status'] = 'running'
    project['current_step'] = step_name
    project['error'] = None
    project['output_file'] = None
    
    print(f"üîÑ Starting retry from step '{step_name}' for project {project_id}")
    
    # Ch·∫°y l·∫°i pipeline t·ª´ b∆∞·ªõc ƒë∆∞·ª£c ch·ªçn
    thread = threading.Thread(target=run_pipeline_from_step, args=(project_id, step_name))
    thread.daemon = True
    thread.start()
    
    return jsonify({'status': 'success', 'message': f'Retrying pipeline from step: {step_name}'})

def run_pipeline_from_step(project_id, start_step, config=None):
    """Ch·∫°y pipeline t·ª´ m·ªôt b∆∞·ªõc c·ª• th·ªÉ, s·ª≠ d·ª•ng t√†i nguy√™n t·ª´ c√°c b∆∞·ªõc tr∆∞·ªõc ƒë√≥"""
    try:
        project = projects[project_id]
        workdir = Path(f"projects/{project_id}")
        
        # ƒê·∫£m b·∫£o config c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin
        if config is None:
            config = DEFAULT_CONFIG.copy()
        else:
            full_config = DEFAULT_CONFIG.copy()
            full_config.update(config)
            config = full_config
        
        print(f"üîÑ Running pipeline from step: {start_step} for project {project_id}")
        
        # Danh s√°ch c√°c b∆∞·ªõc theo th·ª© t·ª±
        step_order = ['download', 'slow', 'stt', 'translate', 'tts', 'replace_audio', 'silence_removal', 'speed_up', 'music', 'overlay']
        
        try:
            start_index = step_order.index(start_step)
        except ValueError:
            print(f"‚ùå Invalid step name: {start_step}")
            project['status'] = 'error'
            project['error'] = f'Invalid step name: {start_step}'
            return
        
        # Ki·ªÉm tra v√† t·∫°o c√°c file c·∫ßn thi·∫øt t·ª´ c√°c b∆∞·ªõc tr∆∞·ªõc ƒë√≥
        print(f"üîç Checking required files from previous steps...")
        
        # Mapping c√°c file c·∫ßn thi·∫øt cho t·ª´ng b∆∞·ªõc
        required_files = {
            'slow': ['input.mp4'],
            'stt': ['slow.mp4'],
            'translate': ['subs_raw.srt'],
            'tts': ['subs_vi.srt'],
            'replace_audio': ['slow.mp4', 'tts.wav'],
            'silence_removal': ['final_video.mp4'],
            'speed_up': ['silence_removed.mp4'],
            'music': ['fast_video.mp4'],
            'overlay': ['final_video.mp4']
        }
        
        # Ki·ªÉm tra file c·∫ßn thi·∫øt cho b∆∞·ªõc hi·ªán t·∫°i
        if start_step in required_files:
            missing_files = []
            for file_name in required_files[start_step]:
                file_path = workdir / file_name
                if not file_path.exists():
                    missing_files.append(file_name)
            
            if missing_files:
                error_msg = f"Missing required files for step '{start_step}': {', '.join(missing_files)}"
                print(f"‚ùå {error_msg}")
                project['status'] = 'error'
                project['error'] = error_msg
                check_and_start_next_project()
                return
        
        # Ch·∫°y t·ª´ b∆∞·ªõc b·∫Øt ƒë·∫ßu ƒë·∫øn cu·ªëi
        for i in range(start_index, len(step_order)):
            step = step_order[i]
            
            # Ki·ªÉm tra xem project c√≥ c√≤n t·ªìn t·∫°i kh√¥ng
            if project_id not in projects:
                print(f"‚ùå Project {project_id} no longer exists, stopping pipeline")
                return
            
            # Ki·ªÉm tra xem project c√≥ b·ªã d·ª´ng kh√¥ng
            if project['status'] == 'stopped':
                print(f"üõë Project {project_id} was stopped, ending pipeline")
                return
            
            # C·∫≠p nh·∫≠t b∆∞·ªõc hi·ªán t·∫°i
            project['current_step'] = step
            project['steps'][step]['status'] = 'running'
            
            print(f"üîÑ Running step: {step}")
            
            try:
                # Ch·∫°y b∆∞·ªõc hi·ªán t·∫°i
                run_single_step(project_id, step, workdir, config)
                
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng
                project['steps'][step]['status'] = 'completed'
                project['steps'][step]['progress'] = 100
                
                # T√≠nh progress t·ªïng th·ªÉ
                completed_steps = len([s for s in project['steps'].values() if s['status'] == 'completed'])
                total_steps = len(project['steps'])
                project['progress'] = int((completed_steps / total_steps) * 100)
                
            except Exception as e:
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªói
                project['steps'][step]['status'] = 'error'
                project['steps'][step]['progress'] = 0
                project['steps'][step]['error'] = str(e)
                project['status'] = 'error'
                project['error'] = str(e)
                
                vietnamese_error = get_vietnamese_error_message(str(e))
                print(f"‚ùå Error in step {step}: {vietnamese_error}")
                
                # K√≠ch ho·∫°t d·ª± √°n ti·∫øp theo trong queue
                check_and_start_next_project()
                return
        
        # Ho√†n th√†nh t·∫•t c·∫£ c√°c b∆∞·ªõc
        project['status'] = 'completed'
        project['progress'] = 100
        
        # T√¨m file output cu·ªëi c√πng
        final_output = None
        for output_file in ['final_video.mp4', 'fast_video.mp4', 'silence_removed.mp4', 'slow.mp4']:
            if (workdir / output_file).exists():
                final_output = workdir / output_file
                break
        
        if final_output:
            project['output_file'] = str(final_output)
        
        print(f"‚úÖ Project {project_id} completed from step {start_step}")
        
        # K√≠ch ho·∫°t d·ª± √°n ti·∫øp theo trong queue
        check_and_start_next_project()
        
    except Exception as e:
        print(f"‚ùå Pipeline error for project {project_id}: {e}")
        
        # Ki·ªÉm tra xem project c√≥ t·ªìn t·∫°i kh√¥ng
        if project_id in projects:
            project = projects[project_id]
            project['status'] = 'error'
            vietnamese_error = get_vietnamese_error_message(str(e))
            project['error'] = vietnamese_error
            print(f"Vietnamese error message: {vietnamese_error}")
        else:
            print(f"Project {project_id} not found when handling pipeline error: {e}")
        
        # K√≠ch ho·∫°t d·ª± √°n ti·∫øp theo trong queue ngay c·∫£ khi d·ª± √°n hi·ªán t·∫°i b·ªã l·ªói
        print(f"üîÑ Project {project_id} failed, starting next project in queue...")
        check_and_start_next_project()


def run_single_step(project_id, step_name, workdir=None, config=None):
    """Ch·∫°y l·∫°i m·ªôt step c·ª• th·ªÉ"""
    try:
        project = projects[project_id]
        
        # Ki·ªÉm tra n·∫øu d·ª± √°n ƒë√£ b·ªã d·ª´ng
        if project['status'] == 'stopped':
            print(f"Project {project_id} is stopped, skipping step {step_name}")
            return
        
        # ƒê·∫£m b·∫£o config c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin
        if config is None:
            config = DEFAULT_CONFIG.copy()
        else:
            full_config = DEFAULT_CONFIG.copy()
            full_config.update(config)
            config = full_config
            
        if workdir is None:
            workdir = Path(f"projects/{project_id}")
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i
        project['current_step'] = step_name
        project['steps'][step_name]['status'] = 'running'
        project['status'] = 'running'
        
        if step_name == 'download':
            # Download l·∫°i video
            input_mp4 = workdir / "input.mp4"
            download_with_ytdlp(project['url'], input_mp4)
            project['steps']['download']['status'] = 'completed'
            project['steps']['download']['progress'] = 100
            project['progress'] = 10
            
        elif step_name == 'slow':
            # Gi·∫£m t·ªëc ƒë·ªô video
            input_mp4 = workdir / "input.mp4"
            if not input_mp4.exists():
                raise RuntimeError("File input.mp4 kh√¥ng t·ªìn t·∫°i. H√£y ch·∫°y b∆∞·ªõc 'download' tr∆∞·ªõc.")
            
            slow_mp4 = workdir / "slow.mp4"
            slow_down_video(input_mp4, slow_mp4)
            project['steps']['slow']['status'] = 'completed'
            project['steps']['slow']['progress'] = 100
            project['progress'] = 20
            
        elif step_name == 'stt':
            # Speech-to-Text - s·ª≠ d·ª•ng file slow.mp4 ƒë√£ c√≥
            slow_mp4 = workdir / "slow.mp4"
            if not slow_mp4.exists():
                raise RuntimeError("File slow.mp4 kh√¥ng t·ªìn t·∫°i. H√£y ch·∫°y b∆∞·ªõc 'slow' tr∆∞·ªõc.")
            
            stt_wav = workdir / "stt.wav"
            subs_srt_raw = workdir / "subs_raw.srt"
            extract_audio_for_stt(slow_mp4, stt_wav)
            try:
                stt_assemblyai(stt_wav, subs_srt_raw, config['assemblyai_api_key'], language_code=config['stt_language'])
                project['steps']['stt']['status'] = 'completed'
                project['steps']['stt']['progress'] = 100
            except Exception as e:
                print(f"AssemblyAI STT failed: {e}")
                with open(subs_srt_raw, 'w', encoding='utf-8') as f:
                    f.write("1\n00:00:00,000 --> 00:00:05,000\n[Audio processing failed]\n\n")
                project['steps']['stt']['status'] = 'error'
                project['steps']['stt']['progress'] = 100
                project['steps']['stt']['error'] = str(e)
                raise e  # Re-raise ƒë·ªÉ x·ª≠ l√Ω trong exception handler
            project['progress'] = 25
            

            
        elif step_name == 'translate':
            # D·ªãch thu·∫≠t - s·ª≠ d·ª•ng file subs.srt ƒë√£ c√≥
            subs_srt = workdir / "subs.srt"
            if not subs_srt.exists():
                raise RuntimeError("File subs.srt kh√¥ng t·ªìn t·∫°i. H√£y ch·∫°y b∆∞·ªõc 'stt' tr∆∞·ªõc.")
            
            subs_translated_srt = workdir / "subs_vi.srt"
            
            # S·ª≠ d·ª•ng Gemini v·ªõi retry logic v√† key management
            max_retries = 3  # 3 l·∫ßn retry, m·ªói l·∫ßn th·ª≠ t·∫•t c·∫£ keys
            last_error = None
            
            # Th·ª≠ t·∫•t c·∫£ keys tr∆∞·ªõc khi b√°o l·ªói
            backup_keys = config.get('gemini_backup_keys', [])
            user_key = config.get('gemini_api_key', '').strip()
            all_keys = [user_key] + backup_keys if user_key else backup_keys
            
            translation_success = False
            for retry_attempt in range(max_retries):
                for key_index, current_gemini_key in enumerate(all_keys):
                    if not current_gemini_key:
                        continue
                        
                    try:
                        print(f"üîÑ Translation attempt {retry_attempt + 1}/{max_retries} with Gemini key #{key_index + 1}")
                        
                        # Ch·ªâ s·ª≠ d·ª•ng Gemini cho AI translation
                        translate_srt_ai(subs_srt, subs_translated_srt, model=config['gemini_model'], api_key=current_gemini_key, provider='gemini', config=config)
                        
                        project['steps']['translate']['status'] = 'completed'
                        project['steps']['translate']['progress'] = 100
                        project['progress'] = 40
                        print(f"‚úÖ Translation completed successfully with key #{key_index + 1}")
                        translation_success = True
                        break  # Tho√°t kh·ªèi v√≤ng l·∫∑p key n·∫øu th√†nh c√¥ng
                        
                    except Exception as e:
                        last_error = e
                        print(f"‚ùå Translation failed with key #{key_index + 1}: {e}")
                        
                        # Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi th·ª≠ key ti·∫øp theo
                        if key_index < len(all_keys) - 1:
                            time.sleep(1)
                
                # N·∫øu translation th√†nh c√¥ng, tho√°t kh·ªèi v√≤ng l·∫∑p retry
                if translation_success:
                    break
                
                # Ch·ªù l√¢u h∆°n tr∆∞·ªõc khi retry to√†n b·ªô
                if retry_attempt < max_retries - 1:
                    print(f"üîÑ Retrying all keys (attempt {retry_attempt + 2}/{max_retries})")
                    time.sleep(3)
            
            # Ki·ªÉm tra n·∫øu translation ƒë√£ th√†nh c√¥ng
            if project['steps']['translate']['status'] == 'completed':
                print(f"‚úÖ Translation step completed successfully")
            else:
                # N·∫øu t·∫•t c·∫£ retry ƒë·ªÅu th·∫•t b·∫°i
                project['steps']['translate']['status'] = 'error'
                project['steps']['translate']['error'] = str(last_error)
                raise last_error
            
        elif step_name == 'tts':
            # Text-to-Speech - s·ª≠ d·ª•ng file subs_vi.srt ƒë√£ c√≥
            subs_translated_srt = workdir / "subs_vi.srt"
            if not subs_translated_srt.exists():
                raise RuntimeError("File subs_vi.srt kh√¥ng t·ªìn t·∫°i. H√£y ch·∫°y b∆∞·ªõc 'translate' tr∆∞·ªõc.")
            
            tts_wav = workdir / "tts.wav"
            
            try:
                # Ch·ªçn TTS provider d·ª±a tr√™n c·∫•u h√¨nh
                # Ch·ªâ s·ª≠ d·ª•ng FPT AI cho TTS v·ªõi key management
                from pipeline import srt_to_aligned_audio_fpt_ai_with_failover
                current_key = get_current_fpt_key(config)
                if not current_key:
                    raise RuntimeError("No FPT AI API key available")
                
                srt_to_aligned_audio_fpt_ai_with_failover(
                    subs_translated_srt, tts_wav,
                    config,  # Pass full config for key management
                    config['fpt_voice'],
                    config.get('fpt_speed', '-1'),
                    config.get('fpt_format', 'mp3'),
                    speech_speed=config.get('fpt_speech_speed', '0.8')
                )
                project['steps']['tts']['status'] = 'completed'
                project['steps']['tts']['progress'] = 100
                project['progress'] = 50
            except Exception as e:
                print(f"TTS retry failed: {e}")
                project['steps']['tts']['status'] = 'error'
                project['steps']['tts']['error'] = str(e)
                raise e
            
        elif step_name == 'replace_audio':
            # Thay th·∫ø audio - s·ª≠ d·ª•ng file slow.mp4 v√† tts.wav ƒë√£ c√≥
            slow_mp4 = workdir / "slow.mp4"
            if not slow_mp4.exists():
                raise RuntimeError("File slow.mp4 kh√¥ng t·ªìn t·∫°i. H√£y ch·∫°y b∆∞·ªõc 'slow' tr∆∞·ªõc.")
            
            tts_wav = workdir / "tts.wav"
            if not tts_wav.exists():
                raise RuntimeError("File tts.wav kh√¥ng t·ªìn t·∫°i. H√£y ch·∫°y b∆∞·ªõc 'tts' tr∆∞·ªõc.")
            
            final_video = workdir / "final_video.mp4"
            replace_audio(slow_mp4, tts_wav, final_video)
            project['steps']['replace_audio']['status'] = 'completed'
            project['steps']['replace_audio']['progress'] = 100
            project['progress'] = 60
            
        elif step_name == 'speed_up':
            # TƒÉng t·ªëc ƒë·ªô (video c√≥ √¢m thanh ti·∫øng Vi·ªát)
            final_video = workdir / "final_video.mp4"
            if not final_video.exists():
                raise RuntimeError("File final_video.mp4 kh√¥ng t·ªìn t·∫°i. H√£y ch·∫°y b∆∞·ªõc 'replace_audio' tr∆∞·ªõc.")
            
            fast_video = workdir / "fast_video.mp4"
            speed_up_130(final_video, fast_video)
            project['steps']['speed_up']['status'] = 'completed'
            project['steps']['speed_up']['progress'] = 100
            project['progress'] = 70
            
        elif step_name == 'silence_removal':
            # C·∫Øt kho·∫£ng l·∫∑ng cu·ªëi c√πng (t√πy ch·ªçn)
            fast_video = workdir / "fast_video.mp4"
            if not fast_video.exists():
                raise RuntimeError("File fast_video.mp4 kh√¥ng t·ªìn t·∫°i. H√£y ch·∫°y b∆∞·ªõc 'speed_up' tr∆∞·ªõc.")
            
            if config.get('enable_silence_removal', False):
                print(f"üîá Silence removal enabled, processing video...")
                silence_removed_video = workdir / "silence_removed.mp4"
                from pipeline import remove_silence_ffmpeg_video_audio
                remove_silence_ffmpeg_video_audio(
                    fast_video, silence_removed_video,
                    threshold=config.get('silence_threshold', -50.0),
                    min_duration=config.get('min_silence_duration', 0.4),
                    max_duration=config.get('max_silence_duration', 2.0),
                    padding=config.get('silence_padding', 0.1)
                )
                final_output = silence_removed_video
                print(f"‚úÖ Silence removal completed: {silence_removed_video}")
            else:
                print(f"‚è≠Ô∏è Silence removal disabled, skipping...")
                final_output = fast_video
            
            project['steps']['silence_removal']['status'] = 'completed'
            project['steps']['silence_removal']['progress'] = 100
            project['progress'] = 80
            
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ªïng th·ªÉ
        if all(step['status'] == 'completed' for step in project['steps'].values()):
            project['status'] = 'completed'
            project['progress'] = 100
            # X√°c ƒë·ªãnh output file cu·ªëi c√πng
            if config.get('enable_silence_removal', False):
                project['output_file'] = str(workdir / "silence_removed.mp4")
            else:
                project['output_file'] = str(workdir / "fast_video.mp4")
            print(f"‚úÖ All steps completed for project {project_id}")
                    
    except Exception as e:
        # Ki·ªÉm tra xem project c√≥ t·ªìn t·∫°i kh√¥ng
        if project_id in projects:
            project = projects[project_id]
            vietnamese_error = get_vietnamese_error_message(str(e))
            project['steps'][step_name]['status'] = 'error'
            project['steps'][step_name]['error'] = vietnamese_error
            project['error'] = vietnamese_error
            print(f"Step {step_name} error: {e}")
            print(f"Vietnamese message: {vietnamese_error}")
        else:
            print(f"Project {project_id} not found when handling error for step {step_name}: {e}")

@app.route('/api/download/<project_id>')
def download_result(project_id):
    if project_id not in projects:
        return jsonify({'error': 'Project not found'}), 404
    
    project = projects[project_id]
    if project['status'] != 'completed':
        return jsonify({'error': 'Project not completed'}), 400
    
    output_file = Path(project['output_file'])
    if not output_file.exists():
        return jsonify({'error': 'Output file not found'}), 404
    
    return send_file(output_file, as_attachment=True)

@app.route('/api/stop/<project_id>', methods=['POST'])
def stop_project(project_id):
    """D·ª´ng m·ªôt project ƒëang ch·∫°y"""
    if project_id not in projects:
        return jsonify({'error': 'Project not found'}), 404
    
    project = projects[project_id]
    
    if project['status'] != 'running':
        return jsonify({'error': 'Project is not running'}), 400
    
    print(f"üõë Stopping project {project_id}...")
    
    # ƒê√°nh d·∫•u project l√† stopped
    project['status'] = 'stopped'
    project['error'] = 'Project stopped by user'
    
    return jsonify({'status': 'success', 'message': f'Project {project_id} stopped successfully'})

@app.route('/api/restart/<project_id>', methods=['POST'])
def restart_project(project_id):
    """Restart m·ªôt project t·ª´ ƒë·∫ßu"""
    if project_id not in projects:
        return jsonify({'error': 'Project not found'}), 404
    
    project = projects[project_id]
    
    print(f"üîÑ Restarting project {project_id} from beginning...")
    
    # Reset t·∫•t c·∫£ c√°c b∆∞·ªõc v·ªÅ pending
    for step_name, step_data in project['steps'].items():
        step_data['status'] = 'pending'
        step_data['progress'] = 0
        step_data['error'] = None
    
    # Reset tr·∫°ng th√°i project
    project['status'] = 'queued'  # ƒê·∫∑t v·ªÅ queue ƒë·ªÉ ch·ªù ch·∫°y
    project['current_step'] = 'download'
    project['progress'] = 0
    project['error'] = None
    project['output_file'] = None
    project['start_time'] = None
    
    # X√≥a c√°c file c≈© n·∫øu c√≥
    project_dir = Path(f"projects/{project_id}")
    if project_dir.exists():
        try:
            # X√≥a c√°c file ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥
            for file_pattern in ['input.mp4', 'slow.mp4', 'stt.wav', 'subs_raw.srt', 'subs.srt', 
                               'subs_vi.srt', 'tts.wav', 'final_video.mp4', 'fast_video.mp4', 
                               'silence_removed.mp4']:
                for file_path in project_dir.glob(file_pattern):
                    try:
                        file_path.unlink()
                        print(f"üóëÔ∏è Deleted old file: {file_path}")
                    except:
                        pass
        except Exception as e:
            print(f"‚ö†Ô∏è Error cleaning old files: {e}")
    
    # Ki·ªÉm tra xem c√≥ project n√†o ƒëang ch·∫°y kh√¥ng
    running_projects = [p for p in projects.values() if p['status'] == 'running']
    
    if len(running_projects) == 0:
        # Kh√¥ng c√≥ project n√†o ƒëang ch·∫°y, ch·∫°y ngay
        project['status'] = 'running'
        project['queue_position'] = 0
        print(f"üöÄ Starting restarted project {project_id} immediately")
        
        # S·ª≠ d·ª•ng DEFAULT_CONFIG
        config = DEFAULT_CONFIG.copy()
        
        thread = threading.Thread(target=run_pipeline_async, args=(project_id, project['url'], project_dir, config))
        thread.daemon = True
        thread.start()
    else:
        # C√≥ project ƒëang ch·∫°y, th√™m v√†o queue
        queued_projects = [p for p in projects.values() if p['status'] == 'queued']
        project['queue_position'] = len(queued_projects)
        print(f"üìã Restarted project {project_id} added to queue (position: {project['queue_position']})")
    
    return jsonify({'status': 'success', 'message': f'Project {project_id} restarted successfully'})

@app.route('/api/restart-from-step/<project_id>/<step_name>', methods=['POST'])
def restart_from_step(project_id, step_name):
    """Restart m·ªôt project t·ª´ m·ªôt b∆∞·ªõc c·ª• th·ªÉ, s·ª≠ d·ª•ng t√†i nguy√™n t·ª´ c√°c b∆∞·ªõc tr∆∞·ªõc ƒë√≥"""
    if project_id not in projects:
        return jsonify({'error': 'Project not found'}), 404
    
    project = projects[project_id]
    
    # Danh s√°ch c√°c b∆∞·ªõc theo th·ª© t·ª±
    step_order = ['download', 'slow', 'stt', 'translate', 'tts', 'replace_audio', 'silence_removal', 'speed_up', 'music', 'overlay']
    
    if step_name not in step_order:
        return jsonify({'error': f'Invalid step: {step_name}'}), 400
    
    print(f"üîÑ Restarting project {project_id} from step: {step_name}")
    
    # N·∫øu project ƒëang ch·∫°y, d·ª´ng n√≥ tr∆∞·ªõc
    if project['status'] == 'running':
        project['status'] = 'stopped'
        project['error'] = 'Project stopped to restart from step'
    
    # Reset t·∫•t c·∫£ c√°c b∆∞·ªõc t·ª´ step_name tr·ªü ƒëi v·ªÅ pending
    step_index = step_order.index(step_name)
    for i in range(step_index, len(step_order)):
        step = step_order[i]
        if step in project['steps']:
            project['steps'][step]['status'] = 'pending'
            project['steps'][step]['progress'] = 0
            project['steps'][step]['error'] = None
    
    # Gi·ªØ nguy√™n c√°c b∆∞·ªõc tr∆∞·ªõc ƒë√≥ (completed)
    for i in range(0, step_index):
        step = step_order[i]
        if step in project['steps']:
            project['steps'][step]['status'] = 'completed'
            project['steps'][step]['progress'] = 100
            project['steps'][step]['error'] = None
    
    # C·∫≠p nh·∫≠t tr·∫°ng th√°i project
    project['status'] = 'queued'
    project['current_step'] = step_name
    project['error'] = None
    project['output_file'] = None
    project['start_time'] = None
    
    # T√≠nh l·∫°i progress d·ª±a tr√™n s·ªë b∆∞·ªõc ƒë√£ ho√†n th√†nh
    completed_steps = len([s for s in project['steps'].values() if s['status'] == 'completed'])
    total_steps = len(project['steps'])
    project['progress'] = int((completed_steps / total_steps) * 100)
    
    # Ki·ªÉm tra xem c√≥ project n√†o ƒëang ch·∫°y kh√¥ng
    running_projects = [p for p in projects.values() if p['status'] == 'running']
    
    if len(running_projects) == 0:
        # Kh√¥ng c√≥ project n√†o ƒëang ch·∫°y, ch·∫°y ngay
        project['status'] = 'running'
        project['queue_position'] = 0
        print(f"üöÄ Starting project {project_id} from step {step_name} immediately")
        
        # S·ª≠ d·ª•ng DEFAULT_CONFIG
        config = DEFAULT_CONFIG.copy()
        
        thread = threading.Thread(target=run_pipeline_from_step, args=(project_id, step_name, config))
        thread.daemon = True
        thread.start()
    else:
        # C√≥ project ƒëang ch·∫°y, th√™m v√†o queue
        queued_projects = [p for p in projects.values() if p['status'] == 'queued']
        project['queue_position'] = len(queued_projects)
        print(f"üìã Project {project_id} restarted from step {step_name} added to queue (position: {project['queue_position']})")
    
    return jsonify({
        'status': 'success', 
        'message': f'Project {project_id} will restart from step: {step_name}',
        'restart_step': step_name,
        'completed_steps': [s for s in step_order[:step_index]],
        'pending_steps': [s for s in step_order[step_index:]]
    })

@app.route('/api/delete/<project_id>', methods=['DELETE'])
def delete_project(project_id):
    if project_id not in projects:
        return jsonify({'error': 'Project not found'}), 404
    
    project = projects[project_id]
    
    # X√≥a folder d·ª± √°n
    project_dir = Path(f"projects/{project_id}")
    if project_dir.exists():
        try:
            shutil.rmtree(project_dir)
            print(f"üóëÔ∏è Deleted project folder: {project_dir}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error deleting project folder: {e}")
    
    # X√≥a kh·ªèi danh s√°ch projects
    del projects[project_id]
    
    # X√≥a kh·ªèi queue n·∫øu ƒëang trong queue (kh√¥ng c·∫ßn thi·∫øt n·ªØa v√¨ kh√¥ng d√πng queue.Queue)
    print(f"üóëÔ∏è Project {project_id} removed from projects list")
    
    return jsonify({'status': 'success', 'message': 'Project deleted successfully'})

@app.route('/api/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file provided'}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No file selected'}), 400
    
    filename = secure_filename(file.filename)
    upload_dir = Path('uploads')
    upload_dir.mkdir(exist_ok=True)
    
    file_path = upload_dir / filename
    file.save(file_path)
    
    return jsonify({'file_path': str(file_path)})

if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port=5000)

